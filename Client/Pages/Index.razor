@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorWebAssemblySignalRApp.Shared
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<h2>Welcome to BlazorChat!</h2>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" disabled="@IsConnected" />
        <button @onclick="LogIn" disabled="@IsConnected">Log in</button>
    </label>
</div>

@if (IsConnected && !InGroup)
{
    <h3>Groups</h3>
    <ul>
    @foreach (var group in @groups)
    {
        <li><a href="" @onclick="@(e => JoinGroup(group.Name))">@group.Name (@group.MemberCount / @Constants.MaxMemberCount users)</a></li>
    }
    </ul>

    <div class="form-group">
        <label>
            New group:
            <input @bind="newGroup" size="50" />
            <button @onclick="@(e => JoinGroup(newGroup))" disabled="@(!IsConnected)">Join</button>
        </label>
    </div>
}

@if (IsConnected && InGroup)
{
    <h3>Now chatting in @currentGroup</h3>

    <button @onclick="LeaveGroup">Leave group</button>

    <form @onsubmit="Send">
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>

        <button type="submit" disabled="@(!IsConnected)">Send</button>
    </form>

    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>    
}

@code {
    private HubConnection? hubConnection;
    private string currentGroup = "";
    private GroupDTO[] groups = new GroupDTO[0];
    private List<string> messages = new List<string>();
    private string newGroup = "";
    private string? userInput = "Max";
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<List<GroupDTO>>("RefreshGroups", (groups) =>
        {
            this.groups = groups.ToArray();
            StateHasChanged();
        });

    }

    private async Task LogIn()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StartAsync();                    
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput, currentGroup);
            messageInput = "";
        }
    }

    public async Task JoinGroup(string groupName)
    {
        currentGroup = newGroup = groupName;
        messages.Clear();
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddToGroup", userInput, groupName);
        }        
    }

    public async Task LeaveGroup()
    {
        messages.Clear();        
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromGroup", userInput, currentGroup);
        }        
        currentGroup = "";
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public bool InGroup => !string.IsNullOrEmpty(currentGroup);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
